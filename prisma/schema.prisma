generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DEVELOPMENT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model client {
  client_id      String           @id @default(uuid())
  first_name     String           @db.VarChar(255)
  last_name      String           @db.VarChar(255)
  email          String           @unique()
  phone          String           @db.VarChar(255)
  photo_url      String?          @db.VarChar(255)
  user_id        String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  user           user             @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  client_address client_address[]
  job            job[]
}

model client_address {
  client_address_id String @id @default(uuid())
  street            String @db.VarChar(100)
  city              String @db.VarChar(100)
  postal_code       String @db.VarChar(10)
  state             String @db.VarChar(30)
  country           String @db.VarChar(50)
  client_id         String
  client            client @relation(fields: [client_id], references: [client_id], onDelete: Cascade, onUpdate: NoAction)
}

model employee {
  employee_id      String             @id @default(uuid())
  first_name       String             @db.VarChar(255)
  last_name        String             @db.VarChar(255)
  email            String             @unique()
  phone            String             @db.VarChar(255)
  photo_url        String?            @db.VarChar(255)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  user_id          String
  user             user               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  employee_address employee_address[]
  job_employee     job_employee[]
}

model employee_address {
  employee_address_id String   @id @default(uuid())
  street              String   @db.VarChar(100)
  city                String   @db.VarChar(100)
  postal_code         String   @db.VarChar(10)
  state               String   @db.VarChar(30)
  country             String   @db.VarChar(50)
  employee_id         String
  employee            employee @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade, onUpdate: NoAction)
}

model job {
  job_id       String         @id @default(uuid())
  title        String         @db.VarChar(100)
  description  String         @db.VarChar(200)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  user_id      String
  client_id    String
  client       client         @relation(fields: [client_id], references: [client_id], onDelete: Cascade, onUpdate: NoAction)
  user         user           @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  job_employee job_employee[]
}

model job_employee {
  job_employee_id    String               @id @default(uuid())
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  job_id             String
  employee_id        String
  employee           employee             @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade, onUpdate: NoAction)
  job                job                  @relation(fields: [job_id], references: [job_id], onDelete: Cascade, onUpdate: NoAction)
  job_employee_labor job_employee_labor[]
}

model job_employee_labor {
  job_employee_labor_id String       @id @default(uuid())
  created_at            DateTime     @default(now())
  updated_at            DateTime     @updatedAt
  startDateTime         String       @db.VarChar(255)
  endDateTime           String       @db.VarChar(255)
  description           String       @db.VarChar(255)
  job_employee_id       String
  job_employee          job_employee @relation(fields: [job_employee_id], references: [job_employee_id], onDelete: Cascade, onUpdate: Restrict)
}

model user {
  user_id      String         @id @default(uuid())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  first_name   String         @db.VarChar(255)
  last_name    String         @db.VarChar(255)
  email        String         @unique()
  password     String         @db.VarChar(200)
  policy       Boolean
  photo_url    String?        @db.VarChar(255)
  phone        String?        @db.VarChar(255)
  client       client[]
  employee     employee[]
  job          job[]
  user_address user_address[]
}

model user_address {
  user_address_id String @id @default(uuid())
  street          String @db.VarChar(100)
  city            String @db.VarChar(100)
  postal_code     String @db.VarChar(10)
  state           String @db.VarChar(30)
  country         String @db.VarChar(50)
  user_id         String
  user            user   @relation(fields: [user_id], references: [user_id])
}
